P_s_t = diag(4)
for(t_j in focus_times) {
print(paste0(which(focus_times == t_j)), " of ", length(focus_times))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
alpha_j = alpha_j / r_j
diag(alpha_j) = -rowSums(alpha_j)
P_s_t = P_s_t %*% (diag(4) + alpha_j)
}
return(P_s_t)
}
aj_estimate(1, 2, cavData, 1)
aj_estimate <- function(s, t, data_mat, sex) {
# Take only subjects with the correct covariate specification
data_mat_sub = data_mat[data_mat$sex == sex, ]
# Partition the time domain
t_unique = sort(unique(data_mat_sub$years))
focus_times = t_unique[t_unique > s & t_unique <= t]
P_s_t = diag(4)
for(t_j in focus_times) {
print(paste0(which(focus_times == t_j), " of ", length(focus_times)))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
alpha_j = alpha_j / r_j
diag(alpha_j) = -rowSums(alpha_j)
P_s_t = P_s_t %*% (diag(4) + alpha_j)
}
return(P_s_t)
}
aj_estimate(1, 2, cavData, 1)
aj_estimate(1, 2, cavData, 0)
p_ic <- c(p1=1,p2=0,p3=0,p4=0,p5=1,p6=0,p7=0,p8=1,p9=0) # initial condition
beta <- matrix(trueValues[par_index$beta], ncol = 3, byrow = F)
out <- deSolve::ode(p_ic, times = 1:2, func = model_t,
parms = list(b=beta, x_ik = 0))
P <- matrix(c(out[2,"p1"], out[2,"p2"], out[2,"p3"], out[2,"p4"],
0, out[2,"p5"], out[2,"p6"], out[2,"p7"],
0,  0, out[2,"p8"], out[2,"p9"],
0,  0,  0,  1), nrow = 4, byrow = T)
P
library(deSolve, quietly=T)
library(msm, quietly = T)
Q <- function(time,sex,betaMat){
q1  = exp( c(1,time,sex) %*% betaMat[1,] )  # Transition from state 1 to state 2.
q2  = exp( c(1,time,sex) %*% betaMat[2,] )  # Transition from state 1 to death.
q3  = exp( c(1,time,sex) %*% betaMat[3,] )  # Transition from state 2 to state 3.
q4  = exp( c(1,time,sex) %*% betaMat[4,] )  # Transition from state 2 to death.
q5  = exp( c(1,time,sex) %*% betaMat[5,] )  # Transition from state 3 to death.
qmat = matrix(c( 0,q1, 0,q2,
0, 0,q3,q4,
0, 0, 0,q5,
0, 0, 0, 0),nrow=4,byrow=TRUE)
diag(qmat) = -rowSums(qmat)
return(qmat)
}
model_t <- function(t,p,parms) {
betaMat <- matrix(parms$b, ncol = 3, byrow = F)
q1  = exp( c(1,t,parms$x_ik) %*% betaMat[1,] )  # Transition from state 1 to state 2.
q2  = exp( c(1,t,parms$x_ik) %*% betaMat[2,] )  # Transition from state 1 to death.
q3  = exp( c(1,t,parms$x_ik) %*% betaMat[3,] )  # Transition from state 2 to state 3.
q4  = exp( c(1,t,parms$x_ik) %*% betaMat[4,] )  # Transition from state 2 to death.
q5  = exp( c(1,t,parms$x_ik) %*% betaMat[5,] )  # Transition from state 3 to death.
dP = rep(1,9) # this is the vector with all differential equations
dP[1] = p[1]*(-q1-q2)
dP[2] = p[1]*q1 + p[2]*(-q3-q4)
dP[3] = p[2]*q3 - p[3]*q5
dP[4] = p[1]*q2 + p[2]*q4 + p[3]*q5
dP[5] = p[5]*(-q3-q4)
dP[6] = p[5]*q3 - p[6]*q5
dP[7] = p[5]*q4 + p[6]*q5
dP[8] = -p[8]*q5
dP[9] = p[8]*q5
return(list(dP))
}
aj_estimate <- function(s, t, data_mat, sex) {
# Take only subjects with the correct covariate specification
data_mat_sub = data_mat[data_mat$sex == sex, ]
# Partition the time domain
t_unique = sort(unique(data_mat_sub$years))
focus_times = t_unique[t_unique > s & t_unique <= t]
P_s_t = diag(4)
for(t_j in focus_times) {
print(paste0(which(focus_times == t_j), " of ", length(focus_times)))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
alpha_j = alpha_j / r_j
diag(alpha_j) = -rowSums(alpha_j)
P_s_t = P_s_t %*% (diag(4) + alpha_j)
}
return(P_s_t)
}
# ------------------------------------------------------------------------------
# Applying to simulated data ---------------------------------------------------
# (ignoring covariates; ignoring misclassification) ----------------------------
# ------------------------------------------------------------------------------
load('DataOut/Continuous/cavData1.rda')
trueValues = c(-2.31617310,  -1.28756312,  -1.10116400,  -2.52367543,
-2.10384797,   0.27050001, -11.65470594,  -0.49306415,
0.28862090,   0.22731278,  -0.39079609,  -0.05894252,
-0.32509646,   0.48631653,   0.99565810,  -5.28923943,
-0.90870027,  -2.40751854,  -2.44696544,  -6.52252202,
-6.24090500)
par_index = list( beta=1:15, misclass=16:19, pi_logit=20:21)
View(cavData)
# ------------------------------------------------------------------------------
# Applying to Real CAV data ----------------------------------------------------
# (ignoring covariates; ignoring misclassification) ----------------------------
# ------------------------------------------------------------------------------
real_cav = msm::cav
View(real_cav)
names(cavData)
names(real_cav)
real_cav = real_cav[,c("PTNUM", "years", "sex", "state")]
colnames(real_cav) = c("ptnum", "years", "sex", "state")
# ------------------------------------------------------------------------------
# Applying to Real CAV data ----------------------------------------------------
# (ignoring covariates; ignoring misclassification) ----------------------------
# ------------------------------------------------------------------------------
real_cav = msm::cav
real_cav = real_cav[,c("PTNUM", "years", "sex", "state")]
colnames(real_cav) = c("ptnum", "years", "sex", "state")
View(real_cav)
par = trueValues
par[6:10] = (1/3) * par[6:10]
View(real_cav)
View(cavData)
# ------------------------------------------------------------------------------
# Applying to Real CAV data ----------------------------------------------------
# (ignoring covariates; ignoring misclassification) ----------------------------
# ------------------------------------------------------------------------------
real_cav = msm::cav
real_cav = real_cav[,c("PTNUM", "years", "sex", "state")]
colnames(real_cav) = c("ptnum", "years", "sex", "state")
par = trueValues
par[6:10] = (1/3) * par[6:10]
P_aj_real = aj_estimate(1, 2, real_cav, 0)
p_ic <- c(p1=1,p2=0,p3=0,p4=0,p5=1,p6=0,p7=0,p8=1,p9=0) # initial condition
beta_real <- matrix(par[par_index$beta], ncol = 3, byrow = F)
beta_real
out_real <- deSolve::ode(p_ic, times = 1:2, func = model_t,
parms = list(b=beta_real, x_ik = 0))
P_desolve_real <- matrix(c(out[2,"p1"], out[2,"p2"], out[2,"p3"], out[2,"p4"],
0, out[2,"p5"], out[2,"p6"], out[2,"p7"],
0,  0, out[2,"p8"], out[2,"p9"],
0,  0,  0,  1), nrow = 4, byrow = T)
P_desolve_real <- matrix(c(out_real[2,"p1"], out_real[2,"p2"], out_real[2,"p3"], out_real[2,"p4"],
0, out_real[2,"p5"], out_real[2,"p6"], out_real[2,"p7"],
0,  0, out_real[2,"p8"], out_real[2,"p9"],
0,  0,  0,  1), nrow = 4, byrow = T)
P_desolve_real
P_aj_real = aj_estimate(1, 2, real_cav, 1)
s = 1
t = 2
data_mat = cavData
sex = 0
# Take only subjects with the correct covariate specification
data_mat_sub = data_mat[data_mat$sex == sex, ]
# Partition the time domain
t_unique = sort(unique(data_mat_sub$years))
focus_times = t_unique[t_unique > s & t_unique <= t]
P_s_t = diag(4)
focus_times
P_s_t = diag(4)
t_j = focus_times[1]
print(paste0(which(focus_times == t_j), " of ", length(focus_times)))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
t_j_ind
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
state_t_j
state_t_j_1
r_j = rep(0,4)
unique(data_mat_sub$ptnum)
i = unique(data_mat_sub$ptnum)[1]
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
sub_dat
t_pt = max(which(sub_dat$years < t_j))
t_pt
t_j
s_i = sub_dat[t_pt, "state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
r_j
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
alpha_j
alpha_j = alpha_j / r_j
alpha_j
diag(alpha_j) = -rowSums(alpha_j)
(diag(4) + alpha_j)
P_s_t = diag(4)
for(t_j in focus_times) {
print(paste0(which(focus_times == t_j), " of ", length(focus_times)))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
alpha_j = alpha_j / r_j
diag(alpha_j) = -rowSums(alpha_j)
P_s_t = P_s_t %*% (diag(4) + alpha_j)
}
P_s_t
data_mat = real_cav
# Take only subjects with the correct covariate specification
data_mat_sub = data_mat[data_mat$sex == sex, ]
# Partition the time domain
t_unique = sort(unique(data_mat_sub$years))
focus_times = t_unique[t_unique > s & t_unique <= t]
P_s_t = diag(4)
focus_times
P_s_t = diag(4)
for(t_j in focus_times) {
print(paste0(which(focus_times == t_j), " of ", length(focus_times)))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
alpha_j = alpha_j / r_j
diag(alpha_j) = -rowSums(alpha_j)
P_s_t = P_s_t %*% (diag(4) + alpha_j)
}
P_s_t = diag(4)
t_j = focus_times[1]
print(paste0(which(focus_times == t_j), " of ", length(focus_times)))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
t_j_ind
t_j_ind_1
state_t_j
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
state_t_j_1
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind
t_j_ind_1 = t_j_ind - 1
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
state_t_j
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
r_j
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
alpha_j
state_t_j
state_t_j_1
for(r in 1:nrow(alpha_j)) {
if(r_j[r] != 0) {
alpha_j[r, ] = alpha_j[r, ] / r_j[r]
}
}
alpha_j
diag(alpha_j) = -rowSums(alpha_j)
c
c
c
# ------------------------------------------------------------------------------
# Applying to Real CAV data ----------------------------------------------------
# (ignoring covariates; ignoring misclassification) ----------------------------
# ------------------------------------------------------------------------------
real_cav = msm::cav
real_cav = real_cav[,c("PTNUM", "years", "sex", "state")]
colnames(real_cav) = c("ptnum", "years", "sex", "state")
par = trueValues
par[6:10] = (1/3) * par[6:10]
P_aj_real = aj_estimate(1, 2, real_cav, 0)
P_aj_real
aj_estimate <- function(s, t, data_mat, sex) {
# Take only subjects with the correct covariate specification
data_mat_sub = data_mat[data_mat$sex == sex, ]
# Partition the time domain
t_unique = sort(unique(data_mat_sub$years))
focus_times = t_unique[t_unique > s & t_unique <= t]
P_s_t = diag(4)
for(t_j in focus_times) {
print(paste0(which(focus_times == t_j), " of ", length(focus_times)))
alpha_j = matrix(0, nrow = 4, ncol = 4)
t_j_ind = which(data_mat_sub$years == t_j)
t_j_ind_1 = t_j_ind - 1
state_t_j = data_mat_sub[t_j_ind,"state"]
state_t_j_1 = data_mat_sub[t_j_ind_1,"state"]
r_j = rep(0,4)
for(i in unique(data_mat_sub$ptnum)) {
sub_dat = data_mat_sub[data_mat_sub$ptnum == i, ]
t_pt = max(which(sub_dat$years < t_j))
s_i = sub_dat[t_pt, "state"]
r_j[s_i] = r_j[s_i] + 1
}
if(sum(r_j) != length(unique(data_mat_sub$ptnum))) print("issue with r_j")
for(g in 1:4) {
for(h in 1:4) {
if(g != h) {
alpha_j[g,h] = sum(state_t_j_1 == g & state_t_j == h)
}
}
}
for(r in 1:nrow(alpha_j)) {
if(r_j[r] != 0) {
alpha_j[r, ] = alpha_j[r, ] / r_j[r]
}
}
diag(alpha_j) = -rowSums(alpha_j)
P_s_t = P_s_t %*% (diag(4) + alpha_j)
}
return(P_s_t)
}
# ------------------------------------------------------------------------------
# Applying to Real CAV data ----------------------------------------------------
# (ignoring covariates; ignoring misclassification) ----------------------------
# ------------------------------------------------------------------------------
real_cav = msm::cav
real_cav = real_cav[,c("PTNUM", "years", "sex", "state")]
colnames(real_cav) = c("ptnum", "years", "sex", "state")
par = trueValues
par[6:10] = (1/3) * par[6:10]
P_aj_real = aj_estimate(1, 2, real_cav, 0)
P_aj_real
# What are the observed transitions?
count_transitions = matrix(0, nrow=4, ncol=4)
total_trans = 0
# What are the observed transitions?
count_transitions = matrix(0, nrow=4, ncol=4)
total_trans = 0
for(i in unique(real_cav[,"ptnum"])){
b_i_mle = as.numeric(c(real_cav[real_cav[,"ptnum"] == i, 'state']))
for(t in 1:(length(b_i_mle) - 1)) {
count_transitions[b_i_mle[t], b_i_mle[t+1]] =
count_transitions[b_i_mle[t], b_i_mle[t+1]] + 1
total_trans = total_trans + 1
}
}
print(count_transitions)
View(real_cav)
# ------------------------------------------------------------------------------
# Applying to Real CAV data ----------------------------------------------------
# (ignoring covariates; ignoring misclassification) ----------------------------
# ------------------------------------------------------------------------------
real_cav = msm::cav
real_cav = real_cav[,c("PTNUM", "years", "sex", "state")]
colnames(real_cav) = c("ptnum", "years", "sex", "state")
# What are the observed transitions?
count_transitions = matrix(0, nrow=4, ncol=4)
total_trans = 0
for(i in unique(real_cav[,"ptnum"])){
b_i_mle = c(real_cav[real_cav[,"ptnum"] == i, 'state'])
for(t in 1:(length(b_i_mle) - 1)) {
count_transitions[b_i_mle[t], b_i_mle[t+1]] =
count_transitions[b_i_mle[t], b_i_mle[t+1]] + 1
total_trans = total_trans + 1
if(b_i_mle[t] == 2 & b_i_mle[t+1] == 1) print(i)
}
}
real_cav[real_cav$ptnum == 100523, ]
obs_trans <- function(df) {
count_transitions = matrix(0, nrow=4, ncol=4)
total_trans = 0
for(i in unique(df[,"ptnum"])){
b_i_mle = c(df[df[,"ptnum"] == i, 'state'])
for(t in 1:(length(b_i_mle) - 1)) {
count_transitions[b_i_mle[t], b_i_mle[t+1]] =
count_transitions[b_i_mle[t], b_i_mle[t+1]] + 1
total_trans = total_trans + 1
if(b_i_mle[t] == 2 & b_i_mle[t+1] == 1) print(i)
}
}
print(count_transitions)
}
obs_trans(cavData)
obs_trans <- function(df) {
count_transitions = matrix(0, nrow=4, ncol=4)
total_trans = 0
for(i in unique(df[,"ptnum"])){
b_i_mle = c(df[df[,"ptnum"] == i, 'state'])
for(t in 1:(length(b_i_mle) - 1)) {
count_transitions[b_i_mle[t], b_i_mle[t+1]] =
count_transitions[b_i_mle[t], b_i_mle[t+1]] + 1
total_trans = total_trans + 1
}
}
print(count_transitions)
}
obs_trans(cavData)
obs_trans(real_cav)
unique(real_cav$state)
exp(-4) / (1 + exp(-4))
s
t
t = 2
data_mat = real_cav
sex = 0
# Take only subjects with the correct covariate specification
data_mat_sub = data_mat[data_mat$sex == sex, ]
# Partition the time domain
t_unique = sort(unique(data_mat_sub$years))
focus_times = t_unique[t_unique > s & t_unique <= t]
s
t
focus_times = t_unique[t_unique > s & t_unique <= t]
focus_times
P_aj = aj_estimate(1, 2, cavData, 0)
P_aj
